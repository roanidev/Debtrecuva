const { admindb, agentsdb, emailsdb, collectionsdb, smsdb } = require("../model/database");
const { v4: uuidv4 } = require('uuid');
const sendResponse = require("../utils/resHandler");
const dayjs = require("dayjs");
const { adminSchema, collectionsSchema, agentsSchema } = require("../schema/systemSchema");
const { docrypt, cryptr } = require("../utils/encrypt");
const { decrypt } = require("dotenv");
const { sendSingle, sendBulk } = require("../utils/sendgrid");
const { sendSms } = require("../utils/termii");
const session = require('express-session')


const Api = (app) => {

    /*
    ....###....##.......##.............###....########..####..######.....########..########.##..........###....########.########.########.....########..#######........###....########..##.....##.####.##....##.####..######..########.########.....###....########..#######..########.
    ...##.##...##.......##............##.##...##.....##..##..##....##....##.....##.##.......##.........##.##......##....##.......##.....##.......##....##.....##......##.##...##.....##.###...###..##..###...##..##..##....##....##....##.....##...##.##......##....##.....##.##.....##
    ..##...##..##.......##...........##...##..##.....##..##..##..........##.....##.##.......##........##...##.....##....##.......##.....##.......##....##.....##.....##...##..##.....##.####.####..##..####..##..##..##..........##....##.....##..##...##.....##....##.....##.##.....##
    .##.....##.##.......##..........##.....##.########...##...######.....########..######...##.......##.....##....##....######...##.....##.......##....##.....##....##.....##.##.....##.##.###.##..##..##.##.##..##...######.....##....########..##.....##....##....##.....##.########.
    .#########.##.......##..........#########.##.........##........##....##...##...##.......##.......#########....##....##.......##.....##.......##....##.....##....#########.##.....##.##.....##..##..##..####..##........##....##....##...##...#########....##....##.....##.##...##..
    .##.....##.##.......##..........##.....##.##.........##..##....##....##....##..##.......##.......##.....##....##....##.......##.....##.......##....##.....##....##.....##.##.....##.##.....##..##..##...###..##..##....##....##....##....##..##.....##....##....##.....##.##....##.
    .##.....##.########.########....##.....##.##........####..######.....##.....##.########.########.##.....##....##....########.########........##.....#######.....##.....##.########..##.....##.####.##....##.####..######.....##....##.....##.##.....##....##.....#######..##.....##
    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                  CREATE NEW ADMIN                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/admin/create', (req, res) => {

        let data = req.body;
        let newadmin = adminSchema(data);
        admindb.search({
            query: req.body.email,
            fields: ['email'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            if (result.rows.length > 0) {
                res.status(200).json(sendResponse(true, "Admin with this email already exists"));

            } else {
                /* -------------------------------------------------- ADD THE ADMIN ------------------------------------------------- */
                admindb.put(newadmin).then(function (result) {
                    res.status(200).json(sendResponse(false, "Admin created Successfully", result));
                })
            }

        }).catch(err => {
            res.status(200).json(sendResponse(true, "Admin already exists", result));

        })
    })
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                  CREATE NEW ADMIN                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     LOGIN ADMIN                                                    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/admin/login', (req, res) => {

        /* ------------------------------------------------- CHECK FOR ADMIN ------------------------------------------------ */
        admindb.search({
            query: req.body.email,
            fields: ['email'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {

            if (result.rows.length > 0) {
                /* ------------------------------------------------------ USER ------------------------------------------------------ */
                let user = result.rows[0];


                /* ------------------------------------------------ SUCCESSFUL LOGIN ------------------------------------------------ */
                if (cryptr.decrypt(user.doc.password) == req.body.password) {
                    delete user.doc["password"];
                    res.status(200).json(sendResponse(false, "Logged In Successfully", user))

                } else {
                    res.status(200).json(sendResponse(true, "Could not login, Please check email or password."))
                }


                /* ------------------------------------------------------------------------------------------------------------------ */
                /*                                                   IF LOGIN FAILED                                                  */
                /* ------------------------------------------------------------------------------------------------------------------ */
            } else {
                res.status(200).json(sendResponse(true, "No such user with the email.."));
            }


            /* ------------------------------------------------------------------------------------------------------------------ */
            /*                                                   IF LOGIN FAILED                                                  */
            /* ------------------------------------------------------------------------------------------------------------------ */
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Login failed, please check Email or Password."));

        })
    })
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     LOGIN ADMIN                                                    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     EDIT ADMIN                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/admin/edit/:adminid', (req, res) => {
        let adminid = req.params.adminid;
        let data = req.body;
        admindb.get(adminid).then(function (result) {
            let theadmin;
            theadmin = data;
            theadmin._id = result._id;
            theadmin._rev = result._rev;
            theadmin.updatedAt = dayjs();
            admindb.put(theadmin).then(function (result) {
                res.status(200).json(sendResponse(false, "Admin updated successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "Could not update admin."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such administrator with that id."));

        })

    })


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     EDIT ADMIN                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     REMOVE ADMIN                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/admin/remove', (req, res) => {
        let adminid = req.body.adminid;

        admindb.get(adminid).then(function (doc) {
            admindb.remove(doc).then(function (result) {
                res.status(200).json(sendResponse(false, "Admin removed successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "No such admin with that id."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such admin with that id."));

        })


    })


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     EDIT ADMIN                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                               ADMIN GET OFFSET LIMIT                                               */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.get('/api/admin/all/:offset/:limit', (req, res) => {
        admindb.allDocs({
            include_docs: true,
            attachments: true,
            skip: req.params.offset,
            limit: req.params.limit
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Admin list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire admin list ."));
        })
    })
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                               ADMIN GET OFFSET LIMIT                                               */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET ADMIN BY ID                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.get('/api/admin/:adminid', (req, res) => {
        admindb.get(req.params.adminid).then(function (result) {
            res.status(200).json(sendResponse(false, "Admin list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire admin list ."));
        })
    })


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                FILTER ADMINISTRATORS                                               */
    /* ------------------------------------------------------------------------------------------------------------------ */

    app.get('/api/admin/filterby/:searchterm', (req, res) => {

        admindb.search({
            query: req.params.searchterm,
            fields: ['firstname', 'lastname', 'email', 'mobile', 'gender', 'role'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Admin list acquired", result));

        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not filter Admin list ."));
        })


    })




    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                FILTER ADMINISTRATORS                                               */
    /* ------------------------------------------------------------------------------------------------------------------ */


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET ADMIN BY ID                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /*
    ....###....##.......##.............###....########..####..######.....########..########.##..........###....########.########.########.....########..#######........###....########..##.....##.####.##....##.####..######..########.########.....###....########..#######..########.
    ...##.##...##.......##............##.##...##.....##..##..##....##....##.....##.##.......##.........##.##......##....##.......##.....##.......##....##.....##......##.##...##.....##.###...###..##..###...##..##..##....##....##....##.....##...##.##......##....##.....##.##.....##
    ..##...##..##.......##...........##...##..##.....##..##..##..........##.....##.##.......##........##...##.....##....##.......##.....##.......##....##.....##.....##...##..##.....##.####.####..##..####..##..##..##..........##....##.....##..##...##.....##....##.....##.##.....##
    .##.....##.##.......##..........##.....##.########...##...######.....########..######...##.......##.....##....##....######...##.....##.......##....##.....##....##.....##.##.....##.##.###.##..##..##.##.##..##...######.....##....########..##.....##....##....##.....##.########.
    .#########.##.......##..........#########.##.........##........##....##...##...##.......##.......#########....##....##.......##.....##.......##....##.....##....#########.##.....##.##.....##..##..##..####..##........##....##....##...##...#########....##....##.....##.##...##..
    .##.....##.##.......##..........##.....##.##.........##..##....##....##....##..##.......##.......##.....##....##....##.......##.....##.......##....##.....##....##.....##.##.....##.##.....##..##..##...###..##..##....##....##....##....##..##.....##....##....##.....##.##....##.
    .##.....##.########.########....##.....##.##........####..######.....##.....##.########.########.##.....##....##....########.########........##.....#######.....##.....##.########..##.....##.####.##....##.####..######.....##....##.....##.##.....##....##.....#######..##.....##
    */

    /*
    .......###....##.......##.............###....########..####..######.....########..########.##..........###....########.########.########.....########..#######........###.....######...########.##....##.########..######.
    ......##.##...##.......##............##.##...##.....##..##..##....##....##.....##.##.......##.........##.##......##....##.......##.....##.......##....##.....##......##.##...##....##..##.......###...##....##....##....##
    .....##...##..##.......##...........##...##..##.....##..##..##..........##.....##.##.......##........##...##.....##....##.......##.....##.......##....##.....##.....##...##..##........##.......####..##....##....##......
    ....##.....##.##.......##..........##.....##.########...##...######.....########..######...##.......##.....##....##....######...##.....##.......##....##.....##....##.....##.##...####.######...##.##.##....##.....######.
    ....#########.##.......##..........#########.##.........##........##....##...##...##.......##.......#########....##....##.......##.....##.......##....##.....##....#########.##....##..##.......##..####....##..........##
    ....##.....##.##.......##..........##.....##.##.........##..##....##....##....##..##.......##.......##.....##....##....##.......##.....##.......##....##.....##....##.....##.##....##..##.......##...###....##....##....##
    ....##.....##.########.########....##.....##.##........####..######.....##.....##.########.########.##.....##....##....########.########........##.....#######.....##.....##..######...########.##....##....##.....######.
    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                      ADD AGENT                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/agent/create', (req, res) => {

        let data = req.body;
        let newagent = agentsSchema(data);
        agentsdb.search({
            query: req.body.email,
            fields: ['email'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            /* -------------------------------------------------- ADD THE ADMIN ------------------------------------------------- */
            if (result.rows.length > 1) {
                res.status(200).json(sendResponse(true, "Agent with this email already exists"));


            } else {
                agentsdb.put(newagent).then(function (result) {
                    res.status(200).json(sendResponse(false, "Agent created Successfully", result));
                })

            }



        }).catch(err => {
            res.status(200).json(sendResponse(true, "Sorry Agent with that email already exists"));
        })

    })
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                      ADD AGENT                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     LOGIN AGENT                                                    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post("/api/agent/login", (req, res) => {

        /* ------------------------------------------------- CHECK FOR ADMIN ------------------------------------------------ */
        agentsdb.search({
            query: req.body.email,
            fields: ['email'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {

            if (result.rows.length > 0) {
                /* ------------------------------------------------------ USER ------------------------------------------------------ */
                let user = result.rows[0];


                /* ------------------------------------------------ SUCCESSFUL LOGIN ------------------------------------------------ */
                if (cryptr.decrypt(user.doc.password) == req.body.password) {
                    delete user.doc["password"];
                    res.status(200).json(sendResponse(false, "Logged In Successfully", user))

                } else {
                    res.status(200).json(sendResponse(true, "Could not login, Please check email or password."))
                }


                /* ------------------------------------------------------------------------------------------------------------------ */
                /*                                                   IF LOGIN FAILED                                                  */
                /* ------------------------------------------------------------------------------------------------------------------ */
            } else {
                res.status(200).json(sendResponse(true, "No such user with the email.."));
            }


            /* ------------------------------------------------------------------------------------------------------------------ */
            /*                                                   IF LOGIN FAILED                                                  */
            /* ------------------------------------------------------------------------------------------------------------------ */
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Login failed, please check Email or Password."));

        })
    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     LOGIN AGENT                                                    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET AGENT BY ID                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.get('/api/agent/:agentid', (req, res) => {
        agentsdb.get(req.params.agentid).then(function (result) {
            res.status(200).json(sendResponse(false, "Agent list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire agent list ."));
        })
    })
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET AGENT BY ID                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET ALL AGENTS                                                   */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.get('/api/agent/all/:offset/:limit', (req, res) => {
        agentsdb.allDocs({
            include_docs: true,
            attachments: true,
            skip: req.params.offset,
            limit: req.params.limit
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Agent list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire agent list ."));
        })
    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET ALL AGENTS                                                   */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                    FILTER AGENTS                                                   */
    /* ------------------------------------------------------------------------------------------------------------------ */

    app.get('/api/agent/filterby/:searchterm', (req, res) => {

        agentsdb.search({
            query: req.params.searchterm,
            fields: ['firstname', 'lastname', 'email', 'mobile', 'gender', 'role'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Agent list acquired", result));

        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not filter agent list ."));
        })


    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                    FILTER AGENTS                                                   */
    /* ------------------------------------------------------------------------------------------------------------------ */


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     EDIT AGENT                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/agent/edit/:agentid', (req, res) => {
        let agentid = req.params.agentid;
        let data = req.body;
        agentsdb.get(agentid).then(function (result) {
            let theadmin;
            theadmin = data;
            theadmin._id = result._id;
            theadmin._rev = result._rev;
            theadmin.updatedAt = dayjs();
            agentsdb.put(theadmin).then(function (result) {
                res.status(200).json(sendResponse(false, "Agent updated successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "Could not update admin."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such agent  with that id."));

        })


    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                     EDIT AGENT                                                     */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                    REMOVE AGENT                                                    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/agent/remove', (req, res) => {
        let agentid = req.body.agentid;
        agentsdb.get(agentid).then(function (doc) {
            agentsdb.remove(doc).then(function (result) {
                res.status(200).json(sendResponse(false, "Agent  removed successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "No such agent with that id."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such agent with that id."));

        })


    })
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                    REMOVE AGENT                                                    */
    /* ------------------------------------------------------------------------------------------------------------------ */


    /*
    .......###....##.......##.............###....########..####..######.....########..########.##..........###....########.########.########.....########..#######........###.....######...########.##....##.########..######.
    ......##.##...##.......##............##.##...##.....##..##..##....##....##.....##.##.......##.........##.##......##....##.......##.....##.......##....##.....##......##.##...##....##..##.......###...##....##....##....##
    .....##...##..##.......##...........##...##..##.....##..##..##..........##.....##.##.......##........##...##.....##....##.......##.....##.......##....##.....##.....##...##..##........##.......####..##....##....##......
    ....##.....##.##.......##..........##.....##.########...##...######.....########..######...##.......##.....##....##....######...##.....##.......##....##.....##....##.....##.##...####.######...##.##.##....##.....######.
    ....#########.##.......##..........#########.##.........##........##....##...##...##.......##.......#########....##....##.......##.....##.......##....##.....##....#########.##....##..##.......##..####....##..........##
    ....##.....##.##.......##..........##.....##.##.........##..##....##....##....##..##.......##.......##.....##....##....##.......##.....##.......##....##.....##....##.....##.##....##..##.......##...###....##....##....##
    ....##.....##.########.########....##.....##.##........####..######.....##.....##.########.########.##.....##....##....########.########........##.....#######.....##.....##..######...########.##....##....##.....######.
    */

    /*
    ....###....##.......##.............###....########..####..######.....########..#######..########......######..########.##....##.########..####.##....##..######......########.##.....##....###....####.##........######.
    ...##.##...##.......##............##.##...##.....##..##..##....##....##.......##.....##.##.....##....##....##.##.......###...##.##.....##..##..###...##.##....##.....##.......###...###...##.##....##..##.......##....##
    ..##...##..##.......##...........##...##..##.....##..##..##..........##.......##.....##.##.....##....##.......##.......####..##.##.....##..##..####..##.##...........##.......####.####..##...##...##..##.......##......
    .##.....##.##.......##..........##.....##.########...##...######.....######...##.....##.########......######..######...##.##.##.##.....##..##..##.##.##.##...####....######...##.###.##.##.....##..##..##........######.
    .#########.##.......##..........#########.##.........##........##....##.......##.....##.##...##............##.##.......##..####.##.....##..##..##..####.##....##.....##.......##.....##.#########..##..##.............##
    .##.....##.##.......##..........##.....##.##.........##..##....##....##.......##.....##.##....##.....##....##.##.......##...###.##.....##..##..##...###.##....##.....##.......##.....##.##.....##..##..##.......##....##
    .##.....##.########.########....##.....##.##........####..######.....##........#######..##.....##.....######..########.##....##.########..####.##....##..######......########.##.....##.##.....##.####.########..######.
    */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                  SEND SINGLE EMAIL                                                 */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post("/api/sendemail/single", async (req, res) => {
        try {
            let data = req.body;
            
            res.status(200).send(await sendSingle(data));
        } catch (error) {
            res.status(200).send(sendResponse(true, "Could not send Email"));
        }

    })



    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                  SEND SINGLE EMAIL                                                 */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   SEND BULK EMAIL                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */

    app.post("/api/sendemail/bulk", async (req, res) => {
        try {
            let data = req.body;
            res.status(200).send(await sendBulk(data));
        } catch (error) {
            res.status(200).send(sendResponse(true, "Could not send Email", error.toString()));
        }

    })


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   SEND BULK EMAIL                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET ALL EMAILS                                                   */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.get('/api/emails/all/:offset/:limit', (req, res) => {
        emailsdb.allDocs({
            include_docs: true,
            attachments: true,
            skip: req.params.offset,
            limit: req.params.limit
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Email list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire email list ."));
        })
    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   GET ALL EMAILS                                                   */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                    FILTER EMAILS                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */

    app.get('/api/emails/filterby/:searchterm', (req, res) => {


        emailsdb.search({
            query: req.params.searchterm,
            fields: ['sender', 'subject', 'from', 'message', 'recipients', 'agent', 'collectionaccount'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Emails list acquired", result));

        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not filter agent list ."));
        })


    })


    /* ------------------------------ delete email ------------------------------ */
    app.post('/api/email/remove', (req, res) => {
        let emailid = req.body.emailid;
        emailsdb.get(emailid).then(function (doc) {
            emailsdb.remove(doc).then(function (result) {
                res.status(200).json(sendResponse(false, "email  removed successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "No such email with that id."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such email with that id."));

        })


    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                    FILTER EMAILS                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */



    /*
      ....###....##.......##.............###....########..####..######.....########..#######..########......######..########.##....##.########..####.##....##..######......########.##.....##....###....####.##........######.
      ...##.##...##.......##............##.##...##.....##..##..##....##....##.......##.....##.##.....##....##....##.##.......###...##.##.....##..##..###...##.##....##.....##.......###...###...##.##....##..##.......##....##
      ..##...##..##.......##...........##...##..##.....##..##..##..........##.......##.....##.##.....##....##.......##.......####..##.##.....##..##..####..##.##...........##.......####.####..##...##...##..##.......##......
      .##.....##.##.......##..........##.....##.########...##...######.....######...##.....##.########......######..######...##.##.##.##.....##..##..##.##.##.##...####....######...##.###.##.##.....##..##..##........######.
      .#########.##.......##..........#########.##.........##........##....##.......##.....##.##...##............##.##.......##..####.##.....##..##..##..####.##....##.....##.......##.....##.#########..##..##.............##
      .##.....##.##.......##..........##.....##.##.........##..##....##....##.......##.....##.##....##.....##....##.##.......##...###.##.....##..##..##...###.##....##.....##.......##.....##.##.....##..##..##.......##....##
      .##.....##.########.########....##.....##.##........####..######.....##........#######..##.....##.....######..########.##....##.########..####.##....##..######......########.##.....##.##.....##.####.########..######.
      */

    /*
    ......................###....##.......##.............###....########..####..######.....########..########.##..........###....########.####.##....##..######......########..#######......######...#######..##.....##.########.....###....##....##.####.########..######.
    .....................##.##...##.......##............##.##...##.....##..##..##....##....##.....##.##.......##.........##.##......##.....##..###...##.##....##........##....##.....##....##....##.##.....##.###...###.##.....##...##.##...###...##..##..##.......##....##
    ....................##...##..##.......##...........##...##..##.....##..##..##..........##.....##.##.......##........##...##.....##.....##..####..##.##..............##....##.....##....##.......##.....##.####.####.##.....##..##...##..####..##..##..##.......##......
    ...................##.....##.##.......##..........##.....##.########...##...######.....########..######...##.......##.....##....##.....##..##.##.##.##...####.......##....##.....##....##.......##.....##.##.###.##.########..##.....##.##.##.##..##..######....######.
    ...................#########.##.......##..........#########.##.........##........##....##...##...##.......##.......#########....##.....##..##..####.##....##........##....##.....##....##.......##.....##.##.....##.##........#########.##..####..##..##.............##
    ...................##.....##.##.......##..........##.....##.##.........##..##....##....##....##..##.......##.......##.....##....##.....##..##...###.##....##........##....##.....##....##....##.##.....##.##.....##.##........##.....##.##...###..##..##.......##....##
    ...................##.....##.########.########....##.....##.##........####..######.....##.....##.########.########.##.....##....##....####.##....##..######.........##.....#######......######...#######..##.....##.##........##.....##.##....##.####.########..######.
    */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                               ADD COLLECTION ACCOUNT                                               */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/companies/create', (req, res) => {

        let data = req.body;
        let newcollection = collectionsSchema(data);


        collectionsdb.search({
            query: req.body.email,
            fields: ['collectionsemail', 'companyemail'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            /* -------------------------------------------------- ADD THE ADMIN ------------------------------------------------- */
            if (result.rows.length > 1) {
                res.status(200).json(sendResponse(true, "Collection Account with this email already exists"));


            } else {
                collectionsdb.put(newcollection).then(function (result) {
                    res.status(200).json(sendResponse(false, "Collection Account created Successfully", result));
                })

            }



        }).catch(err => {
            res.status(200).json(sendResponse(true, "Collection Account with that email already exists"));
        })

    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                               ADD COLLECTION ACCOUNT                                               */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*



/* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                 REMOVE COLLECTIONS                                                 */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post('/api/companies/remove', (req, res) => {
        let companyid = req.body.companyid;
        collectionsdb.get(companyid).then(function (doc) {
            collectionsdb.remove(doc).then(function (result) {
                res.status(200).json(sendResponse(false, "Collection account removed successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "No such collection account with that id."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such collections with that id."));

        })


    })



    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                 REMOVE COLLECTIONS                                                 */
    /* ------------------------------------------------------------------------------------------------------------------ */



    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                  EDIT COLLECTIONS                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */

    app.post('/api/company/edit/:companyid', (req, res) => {
        let companyid = req.params.companyid;
        let data = req.body;
        agentsdb.get(companyid).then(function (result) {
            let theadmin;
            theadmin = data;
            theadmin._id = result._id;
            theadmin._rev = result._rev;
            theadmin.updatedAt = dayjs();
            collectionsdb.put(theadmin).then(function (result) {
                res.status(200).json(sendResponse(false, "Collections Account updated successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "Could not update collections."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such collections account  with that id."));

        })


    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                  EDIT COLLECTIONS                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                            GET COLLECTIONS ACCOUNT BY ID                                           */
    /* ------------------------------------------------------------------------------------------------------------------ */


    app.get('/api/company/:companyid', (req, res) => {
        collectionsdb.get(req.params.companyid).then(function (result) {
            res.status(200).json(sendResponse(false, "Collection account list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire  collection list ."));
        })
    })

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                            GET COLLECTIONS ACCOUNT BY ID                                           */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                          GET ALL COLLECTIONS OFFSET LIMIT                                          */
    /* ------------------------------------------------------------------------------------------------------------------ */

    app.get('/api/company/all/:offset/:limit', (req, res) => {
        collectionsdb.allDocs({
            include_docs: true,
            attachments: true,
            skip: req.params.offset,
            limit: req.params.limit
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Collections list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire email list ."));
        })
    })


    /* -------------------------------------------------------------------------- */
    /*                             get single company                             */
    /* -------------------------------------------------------------------------- */

    app.get('/api/company/:companyid', (req, res) => {
        company.get(req.params.companyid).then(function (result) {
            res.status(200).json(sendResponse(false, "company info acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire company ."));
        })
    })


    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                          GET ALL COLLECTIONS OFFSET LIMIT                                          */
    /* ------------------------------------------------------------------------------------------------------------------ */

    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                             FILTER COLLECTIONS ACCOUNT                                             */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.get('/api/company/filterby/:searchterm', (req, res) => {

        collectionsdb.search({
            query: req.params.searchterm,
            fields: ['companyname', 'companyemail', 'collectionsemail', 'companymobile', 'agentsassigned'],
            include_docs: true,
            highlighting: true, mm: '80%'
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "Collections list acquired", result));

        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not filter Collections list ."));
        })


    })



    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                             FILTER COLLECTIONS ACCOUNT                                             */
    /* ------------------------------------------------------------------------------------------------------------------ */


    /*
    ......................###....##.......##.............###....########..####..######.....########..########.##..........###....########.####.##....##..######......########..#######......######...#######..##.....##.########.....###....##....##.####.########..######.
    .....................##.##...##.......##............##.##...##.....##..##..##....##....##.....##.##.......##.........##.##......##.....##..###...##.##....##........##....##.....##....##....##.##.....##.###...###.##.....##...##.##...###...##..##..##.......##....##
    ....................##...##..##.......##...........##...##..##.....##..##..##..........##.....##.##.......##........##...##.....##.....##..####..##.##..............##....##.....##....##.......##.....##.####.####.##.....##..##...##..####..##..##..##.......##......
    ...................##.....##.##.......##..........##.....##.########...##...######.....########..######...##.......##.....##....##.....##..##.##.##.##...####.......##....##.....##....##.......##.....##.##.###.##.########..##.....##.##.##.##..##..######....######.
    ...................#########.##.......##..........#########.##.........##........##....##...##...##.......##.......#########....##.....##..##..####.##....##........##....##.....##....##.......##.....##.##.....##.##........#########.##..####..##..##.............##
    ...................##.....##.##.......##..........##.....##.##.........##..##....##....##....##..##.......##.......##.....##....##.....##..##...###.##....##........##....##.....##....##....##.##.....##.##.....##.##........##.....##.##...###..##..##.......##....##
    ...................##.....##.########.########....##.....##.##........####..######.....##.....##.########.########.##.....##....##....####.##....##..######.........##.....#######......######...#######..##.....##.##........##.....##.##....##.####.########..######.
    */
    /*
    ....###....##.......##.............###....########..####..######.....####.##....##....########..########.##..........###....########.####..#######..##....##....########..#######......######..##.....##..######.
    ...##.##...##.......##............##.##...##.....##..##..##....##.....##..###...##....##.....##.##.......##.........##.##......##.....##..##.....##.###...##.......##....##.....##....##....##.###...###.##....##
    ..##...##..##.......##...........##...##..##.....##..##..##...........##..####..##....##.....##.##.......##........##...##.....##.....##..##.....##.####..##.......##....##.....##....##.......####.####.##......
    .##.....##.##.......##..........##.....##.########...##...######......##..##.##.##....########..######...##.......##.....##....##.....##..##.....##.##.##.##.......##....##.....##.....######..##.###.##..######.
    .#########.##.......##..........#########.##.........##........##.....##..##..####....##...##...##.......##.......#########....##.....##..##.....##.##..####.......##....##.....##..........##.##.....##.......##
    .##.....##.##.......##..........##.....##.##.........##..##....##.....##..##...###....##....##..##.......##.......##.....##....##.....##..##.....##.##...###.......##....##.....##....##....##.##.....##.##....##
    .##.....##.########.########....##.....##.##........####..######.....####.##....##....##.....##.########.########.##.....##....##....####..#######..##....##.......##.....#######......######..##.....##..######.
    */
    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   SEND SINGLE SMS                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */
    app.post("/api/sendsms/single", async (req, res) => {

        try {
            let data = req.body;
            await sendSms(data, res);

        } catch (error) {
            console.log(error)
            res.status(200).json(sendResponse(true, "Could not send sms" + error.message));
        }

    });

    /* -------------------------------- bulk sms -------------------------------- */

    app.post("/api/sendsms/bulksms", async (req, res) => {

        try {
            let data = req.body;
            await sendSms(data, res);

        } catch (error) {
            console.log(error)
            res.status(200).json(sendResponse(true, "Could not send sms" + error.message));
        }

    });


    /* ------------------------------ view all sms ------------------------------ */
    app.get('/api/sms/all/:offset/:limit', (req, res) => {
        smsdb.allDocs({
            include_docs: true,
            attachments: true,
            skip: req.params.offset,
            limit: req.params.limit
        }).then(function (result) {
            res.status(200).json(sendResponse(false, "sms list acquired", result));
        }).catch(err => {
            res.status(200).json(sendResponse(true, "Could not acquire sms list ."));
        })
    })


    /* ------------------------------- delete sms ------------------------------- */
    app.post('/api/sms/remove', (req, res) => {
        let smsid = req.body.smsid;
        smsdb.get(smsid).then(function (doc) {
            smsdb.remove(doc).then(function (result) {
                res.status(200).json(sendResponse(false, " sms  removed successfully.", result));

            }).catch(err => {
                res.status(200).json(sendResponse(true, "No such  sms with that id."));

            })

        }).catch(err => {
            res.status(200).json(sendResponse(true, "No such sms with that id."));

        })


    })



    /* ------------------------------------------------------------------------------------------------------------------ */
    /*                                                   SEND SINGLE SMS                                                  */
    /* ------------------------------------------------------------------------------------------------------------------ */




    /*
    ....###....##.......##.............###....########..####..######.....####.##....##....########..########.##..........###....########.####..#######..##....##....########..#######......######..##.....##..######.
    ...##.##...##.......##............##.##...##.....##..##..##....##.....##..###...##....##.....##.##.......##.........##.##......##.....##..##.....##.###...##.......##....##.....##....##....##.###...###.##....##
    ..##...##..##.......##...........##...##..##.....##..##..##...........##..####..##....##.....##.##.......##........##...##.....##.....##..##.....##.####..##.......##....##.....##....##.......####.####.##......
    .##.....##.##.......##..........##.....##.########...##...######......##..##.##.##....########..######...##.......##.....##....##.....##..##.....##.##.##.##.......##....##.....##.....######..##.###.##..######.
    .#########.##.......##..........#########.##.........##........##.....##..##..####....##...##...##.......##.......#########....##.....##..##.....##.##..####.......##....##.....##..........##.##.....##.......##
    .##.....##.##.......##..........##.....##.##.........##..##....##.....##..##...###....##....##..##.......##.......##.....##....##.....##..##.....##.##...###.......##....##.....##....##....##.##.....##.##....##
    .##.....##.########.########....##.....##.##........####..######.....####.##....##....##.....##.########.########.##.....##....##....####..#######..##....##.......##.....#######......######..##.....##..######.
    */



}

module.exports = Api;